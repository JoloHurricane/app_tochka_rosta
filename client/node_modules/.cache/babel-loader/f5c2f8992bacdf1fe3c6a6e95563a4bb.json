{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = \"GET\", body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-type'] = 'application/json';\n      }\n\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Что-то пошло не так');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"BxfnnOpcEdsNOomXU7I1ddLbL3o=\");","map":{"version":3,"sources":["C:/react projects/reactExpress/client/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","JSON","stringify","response","fetch","data","json","ok","Error","message","e","clearError"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAI;AAAA;;AACvB,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBJ,QAAQ,CAAC,KAAD,CAArC;AACA,QAAM,CAACK,KAAD,EAAOC,QAAP,IAAmBN,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAMO,OAAO,GAAGN,WAAW,CAC3B,OAAOO,GAAP,EAAWC,MAAM,GAAC,KAAlB,EAAwBC,IAAI,GAAC,IAA7B,EACAC,OAAO,GAAC,EADR,KACa;AACTP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAG;AACC,UAAIM,IAAJ,EAAS;AACLA,QAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AACH;;AACD,YAAMG,QAAQ,GAAE,MAAMC,KAAK,CAACP,GAAD,EAAK;AAC5BC,QAAAA,MAD4B;AACpBC,QAAAA,IADoB;AACdC,QAAAA;AADc,OAAL,CAA3B;AAEA,YAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AACA,UAAG,CAACH,QAAQ,CAACI,EAAb,EAAgB;AACZ,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,qBAA1B,CAAN;AACH;;AACDhB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOY,IAAP;AAEH,KAdD,CAcC,OAAMK,CAAN,EAAQ;AAELjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACe,CAAC,CAACD,OAAH,CAAR;AACA,YAAMC,CAAN;AACH;AACJ,GAxB0B,EAwBzB,EAxByB,CAA3B;AA0BA,QAAMC,UAAU,GAAGrB,WAAW,CAAC,MAAKK,QAAQ,CAAC,IAAD,CAAd,EAAqB,EAArB,CAA9B;AAEA,SAAO;AAACH,IAAAA,OAAD;AAASI,IAAAA,OAAT;AAAiBF,IAAAA,KAAjB;AAAuBiB,IAAAA;AAAvB,GAAP;AACH,CAhCM;;GAAMpB,O","sourcesContent":["import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = ()=>{\r\n    const [loading,setLoading] = useState(false)\r\n    const [error,setError] = useState(null)\r\n    const request = useCallback( \r\n    async (url,method=\"GET\",body=null, \r\n    headers={})=>{\r\n        setLoading(true)\r\n        try{\r\n            if (body){\r\n                body = JSON.stringify(body)\r\n                headers['Content-type'] = 'application/json'\r\n            }\r\n            const response= await fetch(url,{\r\n                method, body, headers})\r\n            const data = await response.json()\r\n            if(!response.ok){\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n            setLoading(false)\r\n            return data\r\n\r\n        }catch(e){\r\n            \r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    },[])\r\n\r\n    const clearError = useCallback(()=> setError(null),[])\r\n\r\n    return {loading,request,error,clearError}\r\n}"]},"metadata":{},"sourceType":"module"}